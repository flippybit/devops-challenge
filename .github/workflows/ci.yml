name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint code with Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUBOCOP_CONFIG_FILE: ./api/.rubocop.yml
          IGNORE_GENERATED_FILES: true
          IGNORE_GITIGNORED_FILES: true
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT: true
          VALIDATE_HTML: true

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [ruby, javascript-typescript]
        build-mode: [none, autobuild]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.language == 'ruby' && 'none' || 'autobuild' }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint, codeql-analysis]  # This ensures both lint and code analysis run in parallel
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List files in the repository
        run: ls -la

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build and Run Docker Compose
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # Pass secret to Docker
        run: |
          docker-compose build
          docker-compose run api rake db:setup
          docker-compose run api rake db:migrate
          docker-compose up -d

  # Placeholder for future deployment stage
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   steps:
  #     - name: Deploy to Production
  #       run: echo "Deployment step goes here"
