name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint code with Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUBOCOP_CONFIG_FILE: ./api/.rubocop.yml
          IGNORE_GENERATED_FILES: true
          IGNORE_GITIGNORED_FILES: true
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT: true
          VALIDATE_HTML: true
      
      - name: Secret Scanning with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config: /dev/null 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [ruby, javascript-typescript]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: none

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # dependency-scanning:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'  # Use  same version as React app

  #     - name: Run npm audit for JavaScript dependencies
  #       working-directory: ./spa
  #       run: |
  #         npm install
  #         npm audit

  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 3.1.3  # Use same version as yRails app

  #     - name: Install dependencies for Ruby
  #       working-directory: ./api
  #       run: bundle install

  #     - name: Run bundler-audit for Ruby dependencies
  #       working-directory: ./api
  #       run: |
  #         gem install bundler-audit
  #         bundle-audit check --update
          
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, codeql-analysis]  # This ensures both lint and code analysis run before the build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Images
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # Pass secret to Docker
        run: |
          docker compose build

  snyk-scan:
      name: Snyk Scan for Docker Images
      runs-on: ubuntu-latest
      needs: build  # Run Snyk scan after the Docker image build
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Build Docker Images
          run: |
            docker compose build

        - name: Run Snyk to check Docker images for vulnerabilities (API)
          uses: snyk/actions/docker@master
          continue-on-error: true # To make sure that SARIF upload gets called
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            image: code-challenge_api:latest
            args: --file=Dockerfile.rails --severity-threshold=high
            sarif: true  # This ensures SARIF file generation for GitHub Code Scanning

        - name: Run Snyk to check Docker images for vulnerabilities (SPA)
          uses: snyk/actions/docker@master
          continue-on-error: true # To make sure that SARIF upload gets called
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            image: code-challenge_spa:latest
            args: --file=Dockerfile.react --severity-threshold=high
            sarif: true

        - name: Run Snyk to check Docker images for vulnerabilities (Nginx)
          uses: snyk/actions/docker@master
          continue-on-error: true # To make sure that SARIF upload gets called
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            image: code-challenge_nginx:latest
            args: --file=Dockerfile.nginx --severity-threshold=high
            sarif: true

        - name: Upload Snyk results to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: snyk.sarif

  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: [build,snyk-scan]  # Only run tests if the build job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Run Database Setup and Migrations
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          docker compose run api rake db:setup
          docker compose run api rake db:migrate

      - name: Run Tests
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} 
        run:
          docker compose run api bundle exec rspec

    
